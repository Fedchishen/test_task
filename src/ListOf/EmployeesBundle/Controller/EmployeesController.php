<?php

namespace ListOf\EmployeesBundle\Controller;

use ListOf\EmployeesBundle\Entity\Employees;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;
use ListOf\EmployeesBundle\Help\SimpleImage;


/**
 * Employee controller.
 *
 * @Route("search")
 */
class EmployeesController extends Controller {

    /**
     * Creates a new employee entity.
     *
     * @Route("/new", name="employees_new")
     * @Method({"GET", "POST"})
     */
    public function newAction(Request $request) {
        $employee = new Employees();
        $form = $this->createForm('ListOf\EmployeesBundle\Form\EmployeesType', $employee);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // $file stores the uploaded png/jpeg/jpg/gif file
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file = $employee->getPhoto();

            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            // moves the file to the directory
            $file->move(
                    $this->getParameter('photo_directory'), $fileName
            );

            // updates the 'photo' property to store the image file name
            // instead of its contents
            $employee->setPhoto($fileName);
            
            $image = new SimpleImage();
            $image->load($this->getParameter('photo_directory').'/'.$fileName);
            $image->resizeToWidth(50);
            $image->save($this->getParameter('photo_directory_min').'/'.$fileName);
            
            $em = $this->getDoctrine()->getManager();
            $em->persist($employee);
            $em->flush();

            return $this->redirectToRoute('employees_show', array('id' => $employee->getId()));
        }

        return $this->render('employees/new.html.twig', array(
                    'employee' => $employee,
                    'form' => $form->createView(),
        ));
    }
    
    public function scaleImage($filename) {
        $imagePath = $this->getParameter('photo_directory').$filename;
        $imagick = new \Imagick(realpath($imagePath));
        $imagick->scaleImage(150, 150, true);
        $imagick->writeimage($this->getParameter('photo_directory').'min/'.$filename);

//        header("Content-Type: image/jpg");
//        echo $imagick->getImageBlob();
    }
    /**
     * @return string
     */
    private function generateUniqueFileName() {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * Finds and displays a employee entity.
     *
     * @Route("/{id}", name="employees_show")
     * @Method("GET")
     */
    public function showAction(Employees $employee) {
        $deleteForm = $this->createDeleteForm($employee);

        return $this->render('employees/show.html.twig', array(
                    'employee' => $employee,
                    'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Displays a form to edit an existing employee entity.
     *
     * @Route("/{id}/edit", name="employees_edit")
     * @Method({"GET", "POST"})
     */
    public function editAction(Request $request, Employees $employee) {
        $deleteForm = $this->createDeleteForm($employee);
        $editForm = $this->createForm('ListOf\EmployeesBundle\Form\EmployeesType', $employee);
        $editForm->handleRequest($request);

        if ($editForm->isSubmitted() && $editForm->isValid()) {

            $file = $employee->getPhoto();
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            $file->move(
                    $this->getParameter('photo_directory'), $fileName
            );
            $employee->setPhoto($fileName);
            
            $image = new SimpleImage();
            $image->load($this->getParameter('photo_directory').'/'.$fileName);
            $image->resizeToWidth(50);
            $image->save($this->getParameter('photo_directory_min').'/'.$fileName);
            
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('employees_show', array('id' => $employee->getId()));
        }

        return $this->render('employees/edit.html.twig', array(
                    'employee' => $employee,
                    'edit_form' => $editForm->createView(),
                    'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Deletes a employee entity.
     *
     * @Route("/{id}", name="employees_delete")
     * @Method("DELETE")
     */
    public function deleteAction(Request $request, Employees $employee) {
        $form = $this->createDeleteForm($employee);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->remove($employee);
            $em->flush();
        }

        return $this->redirectToRoute('search');
    }

    /**
     * Creates a form to delete a employee entity.
     *
     * @param Employees $employee The employee entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm(Employees $employee) {
        return $this->createFormBuilder()
                        ->setAction($this->generateUrl('employees_delete', array('id' => $employee->getId())))
                        ->setMethod('DELETE')
                        ->getForm()
        ;
    }

}
